
SET( PROJ_VERSION	"\"0.0.1\"" )
SET( PROJ_ARCH		${ARCH} )
SET( PROJ_SRC_PATH	${PROJ_PATH}/Src )
SET( PROJ_LINKER_PATH ${PROJ_SRC_PATH}/Linker)
SET( PROJ_SOURCES )
SET( PROJ_HEADERS )
SET( PROJ_INCLUDES	${PROJ_SRC_PATH}
					${PROJ_SRC_PATH}/Include
					${PROJ_SRC_PATH}/Include/C++
					${PROJ_SRC_PATH}/Include/Klib/libc
					${PROJ_SRC_PATH}/Include/Klib/libc++
					${PROJ_SRC_PATH}/Include/Klib/liballoc
					${PROJ_SRC_PATH}/Include/Klib/libposix
					${PROJ_SRC_PATH}/Drivers )

SET( PROJ_LIBRARIES	"${PROJ_SRC_PATH}/Klib/libc.a"
					"${PROJ_SRC_PATH}/Klib/liballoc.a" )

SET( PROJ_WARNING_FLAGS "-Wall -Wextra -Wno-unused-function -Wno-unused-parameter" )
SET( PROJ_CPP_FLAGS "-D__x86__ -D__GENERIX__ -D__GENERIX_VERSION__=${PROJ_VERSION} ${PROJE_WARNINGS} -nostdlib -fno-builtin -nostartfiles -nodefaultlibs" )
SET( PROJ_DEBUG_FLAGS "-g -O0 -D__DEBUG__" )


#ENABLE_LANGUAGE( ASM_NASM )

#SET( ASM_DIALECT "-NASM" )
#SET( CMAKE_ASM${ASM_DIALECT}_SOURCE_FILE_EXTENSIONS nasm;nas;asm )
#SET( CMAKE_ASM${ASM_DIALECT}_COMPILER nasm )
#SET( CMAKE_ASM_COMPILER "@CMAKE_ASM_COMPILER@" )
#SET( CMAKE_ASM_COMPILER_LOADED 1 )
#SET( CMAKE_ASM_COMPILER_ENV_VAR "ASM" )

#SET( CMAKE_ASM_SOURCE_FILE_EXTENSIONS nasm;asm;nas )
#SET( CMAKE_ASM_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC )
#SET( CMAKE_ASM_LINKER_PREFERENCE None )
#IF( UNIX )
#SET( CMAKE_ASM_OUTPUT_EXTENSION .o )
#ELSE( UNIX )
#SET( CMAKE_ASM_OUTPUT_EXTENSION .obj )
#ENDIF( UNIX )

LIST( APPEND PROJ_C_FLAGS "-m32 ${PROJ_CPP_FLAGS}" )
LIST( APPEND PROJ_CXX_FLAGS "${PROJ_C_FLAGS} -DCPP -fno-stack-protector -fno-exceptions -fno-rtti -std=c++11" )
LIST( APPEND PROJ_LD_FLAGS "${PROJ_LINKER_PATH}/Linker32.ld -melf_i386" )
LIST( APPEND PROJ_AR_FLAGS "rcs" )

SET( ASM_OPTIONS "${PROJ_CPP_FLAGS} -x assembler-with-cpp" )
SET( CMAKE_ASM_FLAGS "${ASM_OPTIONS}" )
#SET( CMAKE_ASM-NASM_COMPILER_ARG1 "-f elf32" )
SET( CMAKE_C_FLAGS "${PROJ_C_FLAGS} ${PROJ_WARNING_FLAGS}" )
SET( CMAKE_CXX_FLAGS ${PROJ_CXX_FLAGS} )
#SET (CMAKE_ASM_NASM_OBJECT_FORMAT "elf32")
SET( CMAKE_LD_FLAGS ${PROJ_LD_FLAGS} )

SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJ_SRC_PATH}/Klib/)

SET( KERNEL_SRC )
SET( MEM_SRC )
SET( DRIVERS_SRC )
SET( FILESYSTEM_SRC )
SET( NET_SRC )

MACRO( ADD_KERNEL_SRC DIR )
	SET( SRC )
	FOREACH( VAR ${ARGV} )
		IF( NOT ${VAR} STREQUAL ${DIR} )
			SET( SRC ${SRC} ${DIR}/${VAR} )
		ENDIF( NOT ${VAR} STREQUAL ${DIR} )
	ENDFOREACH( VAR ${ARGV} )
	SET( KERNEL_SRC ${KERNEL_SRC} ${SRC} PARENT_SCOPE )
	SET( KERNEL_SRC ${KERNEL_SRC} ${SRC} )
ENDMACRO( ADD_KERNEL_SRC )

MACRO( ADD_MEM_SRC DIR )
	SET( SRC )
	FOREACH( VAR ${ARGV} )
		IF( NOT ${VAR} STREQUAL ${DIR} )
			SET( SRC ${SRC} ${DIR}/${VAR} )
		ENDIF( NOT ${VAR} STREQUAL ${DIR} )
	ENDFOREACH( VAR ${ARGV} )
	SET( MEM_SRC ${MEM_SRC} ${SRC} PARENT_SCOPE )
ENDMACRO( ADD_MEM_SRC )

MACRO( ADD_DRIVERS_SRC DIR )
	SET( SRC )
	FOREACH( VAR ${ARGV} )
		IF( NOT ${VAR} STREQUAL ${DIR} )
			SET( SRC ${SRC} ${DIR}/${VAR} )
		ENDIF( NOT ${VAR} STREQUAL ${DIR} )
	ENDFOREACH( VAR ${ARGV} )
	SET( DRIVERS_SRC ${DRIVERS_SRC} ${SRC} PARENT_SCOPE )
ENDMACRO( ADD_DRIVERS_SRC )

MACRO( ADD_FILESYSTEM_SRC DIR )
	SET( SRC )
	FOREACH( VAR ${ARGV} )
		IF( NOT ${VAR} STREQUAL ${DIR} )
			SET( SRC ${SRC} ${DIR}/${VAR} )
		ENDIF( NOT ${VAR} STREQUAL ${DIR} )
	ENDFOREACH( VAR ${ARGV} )
	SET( FILESYSTEM_SRC ${FILESYSTEM_SRC} ${SRC} PARENT_SCOPE )
ENDMACRO( ADD_FILESYSTEM_SRC )

MACRO( ADD_NET_SRC DIR )
	SET( SRC )
	FOREACH( VAR ${ARGV} )
		IF( NOT ${VAR} STREQUAL ${DIR} )
			SET( SRC ${SRC} ${DIR}/${VAR} )
		ENDIF( NOT ${VAR} STREQUAL ${DIR} )
	ENDFOREACH( VAR ${ARGV} )
	SET( NET_SRC ${NET_SRC} ${SRC} PARENT_SCOPE )
ENDMACRO( ADD_NET_SRC )

ADD_CUSTOM_COMMAND( OUTPUT +.o
					COMMAND cpp ${PROJ_CPP_FLAGS} -x assembler-with-cpp -o +.s +.asm
                    COMMAND nasm -f elf32 -o +.o +.s
                    DEPENDS +.asm cpp )

ADD_CUSTOM_TARGET( +.o DEPENDS +.asm )
ADD_DEPENDENCIES( +.o +.asm )

#ADD_CUSTOM_COMMAND ( TARGET kernel.img POST_BUILD
#	COMMAND "/usr/bin/ld ${PROJ_LD_FLAGS} -o kernel32.elf ${PROJ_PATH}/Src/Klib/libstdc.a ${PROJ_PATH}/Src/Klib/liballoc.a")

INCLUDE_DIRECTORIES( ${PROJ_INCLUDES} )

ADD_SUBDIRECTORY( ${PROJ_PATH}/Src/Klib )
ADD_SUBDIRECTORY( ${PROJ_PATH}/Src/Kernel )
ADD_SUBDIRECTORY( ${PROJ_PATH}/Src/Mem )
ADD_SUBDIRECTORY( ${PROJ_PATH}/Src/Drivers )
ADD_SUBDIRECTORY( ${PROJ_PATH}/Src/FileSystem )
ADD_SUBDIRECTORY( ${PROJ_PATH}/Src/Net )

ADD_LIBRARY( kernel STATIC ${KERNEL_SRC} ${MEM_SRC} ${DRIVERS_SRC} ${FILESYSTEM_SRC} ${NET_SRC} )
